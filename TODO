---------- PART 2 ----------

//Stop accepting negative input

//factor into acceptInRange(int lo, int hi) and acceptPositive(&int, string)


---------- PART 1 ----------

//switch to recursion

//expand only once it exceeds 5

// move some stuff to Node subclass (is_stem, copy(index, node))

//some of our stuff looks through every single child of leaf when it only needs to look in
    parent->size (just index_in?)

//separate declarations and definitions (but in same file (?))

// keep track of steps

//write destructor

// node print method

// we expand then re-traverse in subtree insert. maybe have expand return the node we should be inserting into. Or, better yet, change expand() to an expand_and_insert().

// mark stuff as const

somehow work around get returning via reference parameter?

-/-rearrage ifs in insert

//move subtree_ functions into Node

-/-it's apparently inefficient that we treat each action after explosion as an insert.

// delete_at_index returns T* to data.
// delete returns T* to data.
// get returns T* to data.
// insert inserts T* to data. returns int.
// subtree_destroy no longer deletes data; just normal Node destructor
adjust benchmark to handle these changes
adjust pt 2 to handle these changes
